
var maxColnum = 11;
var maxRownum = 10;
var mydata = [];
var colOption = [];

for(var i=0; i < maxColnum; i++){
  mydata[i] = [];
  for(var j=0; j < maxRownum; j++){
    mydata[i][j] = "";
  }
  colOption[i] = {readOnly: true};
}
colOption[0] = {readOnly: false};

var container = document.getElementById('main');
var handsontable = new Handsontable(container, {
  /* オプション */
  width: 980,
  height: 240,
  data: mydata,
  rowHeaders: true,
  colHeaders: ["ヤフオク商品URL","商品タイトル","オークションID","現在価格","即決価格","状態","入札件数","残り時間","画像1","画像2","画像3"],
  maxCols: maxColnum,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: false,
  colWidths:[200,300,150,120,120,120,120,120,120,120,120],
  columns: colOption
});

var csv_container = document.getElementById('csv');
var idata = gon.csv_head
var ini = idata

var csv_handsontable = new Handsontable(csv_container, {
  /* オプション */
  width: 980,
  height: 240,
  //data: mydata,
  data: idata,
  rowHeaders: true,
  colHeaders: true,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: false,
  wordWrap: false
});
csv_handsontable.alter('insert_row', idata.length,10);

var selected_container = document.getElementById('selected');
var init = [];
init[0] = [];
init[0][0] = "";

var selected_handsontable = new Handsontable(selected_container, {
  /* オプション */
  width: 380,
  height: 60,
  colWidths: [340],
  //data: mydata,
  data: init,
  colHeaders: ["選択中のセル"],
  rowHeaders: false,
  maxRows: 1,
  manualColumnResize: true,
  autoColumnSize: true,
  wordWrap: false
});

Handsontable.hooks.add('afterSelectionEnd', function() {
  var data = csv_handsontable.getValue();
  var res = [];
  res[0] = [];
  res[0][0] = data;
  //res[0][0] = 2;
  //alert(res);
  selected_handsontable.loadData(res);
  selected_handsontable.render();
  //alert("ok");
}, csv_handsontable);



$("#done").click(function () {
  var tempData = handsontable.getData();
  tempData = JSON.stringify(tempData);
  myData = {data: tempData};
  $.ajax({
    url: "/items/get",
    type: "POST",
    data: myData,
    dataType: 'json',
    success: function (myData) {
      handsontable.loadData(myData);

      handsontable.updateSettings(
        {
          maxRows: maxRownum
        }
      );

    },
    error: function (myData) {
      //handsontable.loadData(myData);
      alert("NG");
    }
  });
});


$("#make_csv").click(function () {

  var itemData = handsontable.getData();
  var myData = [];

  $.ajax({
    url: "/items/set_csv",
    type: "GET",
    success: function (myData) {
      var header = csv_handsontable.getData();
      var headernum = 3;
      var ttime = new Date();

      var mm = (ttime.getMonth()+1).toString(10);
      var dd = ttime.getDate().toString(10);
      var hh = ttime.getHours().toString(10);
      var mi = ttime.getMinutes().toString(10);

      mm = ("0" + mm).slice(-2);
      dd = ("0" + dd).slice(-2);
      hh = ("0" + hh).slice(-2);
      mi = ("0" + mi).slice(-2);

      var chead =  mm + dd + hh + mi;

      for(var k = 0; k < itemData.length; k++){
        if(itemData[k][0] == ""){
          var itemnum = k;
          break;
        }
      }


      var ptable = myData['price'];
      var ttable = myData['title'];
      var ftable = myData['fixed'];
      var ktable = myData['keyword'];

      var headerhash = {};

      var newdata = [];
      for(var i = 0; i < headernum; i++){
        newdata[i] = header[i];
        if(i == 2){
          for(var k = 0; k < header[i].length; k++){
            headerhash[header[i][k]] = k;
          }
        }
      }

      var khash = {};
      var fhash = {};

      for(var k = 0; k < ftable.length; k++){
        fhash[ftable[k][0]] = ftable[k][1];
      }

      for(var k = 0; k < ktable.length; k++){
        var temp = [];
        temp[0] = ktable[k][1];
        temp[1] = ktable[k][2];
        temp[2] = ktable[k][3];
        khash[ktable[k][0]] = temp;
      }

      if(itemnum != 0){
        for(var i = 0; i < itemnum; i++){
          newdata[i+headernum] = [];
          for(var j = 0; j < header[2].length; j++){
            newdata[i+headernum][j] = "";
          }

          var judge = false;

          for(key in khash){
            var n = itemData[i][1].indexOf(key);
            if(n > -1){
              var gh = khash[key];
              judge = true;
              break;
            }
          }


          var price = itemData[i][4];

          if(price == 0){
            price = itemData[i][3];
          }

          for(var m = 0; m < ptable.length; m++){
            if(ptable[m][0] > price){
              price = ptable[m-1][1] + (ptable[m][1] - ptable[m-1][1])/(ptable[m][0] - ptable[m-1][0]) * (price - ptable[m-1][0]);
              break;
            }
          }

          newdata[i+headernum][headerhash['item_sku']] = itemData[i][2];
          newdata[i+headernum][headerhash['item_name']] = itemData[i][1];
          newdata[i+headernum][headerhash['standard_price']] = price;
          newdata[i+headernum][headerhash['main_image_url']] = itemData[i][8];
          newdata[i+headernum][headerhash['other_image_url1']] = itemData[i][9];
          newdata[i+headernum][headerhash['other_image_url2']] = itemData[i][10];

          var tnum = ("000" + i).slice(-3);

          newdata[i+headernum][headerhash['external_product_id']] = chead + tnum;
          newdata[i+headernum][headerhash['external_product_id_type']] = "EAN";

          for(var t = 0; t < ftable.length; t++){
            if(ftable[t][0] in headerhash){
              newdata[i+headernum][headerhash[ftable[t][0]]] = ftable[t][1];
            }
          }

          if(judge == true){
            newdata[i+headernum][headerhash['brand_name']] = gh[0];
            newdata[i+headernum][headerhash['manufacturer']] = gh[1];
            newdata[i+headernum][headerhash['recommended_browse_nodes']] = gh[2];
            newdata[i+headernum][headerhash['generic_keywords']] = gh[3];
          }

          newdata[i+headernum][headerhash['product_description']] = itemData[i][1] + "です。";
          newdata[i+headernum][headerhash['update_delete']] = "Update";
        }
      }
      csv_handsontable.loadData(newdata);
      alert("CSV作成");
    },
    error: function (myData) {
      alert("NG");
    }
  });


});



$("#csv_upload").click(function () {
  var tempData = csv_handsontable.getData();
  tempData = JSON.stringify(tempData);
  myData = {data: tempData};
  $.ajax({
    url: "/items/upload",
    type: "POST",
    data: myData,
    dataType: 'json',
    success: function (myData) {
      alert("アップロードしています");
    },
    error: function (myData) {
      //alert("NG");
    }
  });
});


/////////


var maxColnum = 2;
var maxRownum = 10;
var price_data = [];
var title_data = [];
var colOption = [];

var idata = gon.udata;
var pdata = idata['price'];
var fdata = idata['fixed'];
var tdata = idata['title'];
var kdata = idata['keyword'];

for(var i=0; i < maxRownum; i++){
  price_data[i] = [];
  title_data[i] = [];
  for(var j=0; j < maxColnum; j++){
    price_data[i][j] = i*2000;
    title_data[i][j] = "";
  }
  colOption[i] = {readOnly: true};
}
colOption[0] = {readOnly: false};

var price_container = document.getElementById('price_table');
var price_handsontable = Handsontable(price_container, {
  /* オプション */
  width: 480,
  height: 240,
  //data: price_data,
  data: pdata,
  rowHeaders: true,
  colHeaders: ["ヤフオク販売価格","アマゾン販売価格"],
  maxCols: maxColnum,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: false,
  colWidths:[200,200]
});

var title_container = document.getElementById('title_table');
var title_handsontable = Handsontable(title_container, {
  /* オプション */
  width: 480,
  height: 240,
  //data: title_data,
  data: tdata,
  rowHeaders: true,
  colHeaders: ["置換前","置換後"],
  maxCols: maxColnum,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: false,
  colWidths:[200,200]
});

var int_data =[];
var rnum = 9;
for(var i=0; i < rnum; i++){
  int_data[i] = [];
  int_data[i][0] = "";
  int_data[i][1] = "";
}

int_data[0][0] = "feed_product_type"
int_data[1][0] = "quantity"
int_data[2][0] = "recommended_browse_nodes"
int_data[3][0] = "fulfillment_latency"
int_data[4][0] = "condition_type"
int_data[5][0] = "condition_note"
int_data[6][0] = "merchant_shipping_group_name"

var fix_container = document.getElementById('fix_table');
var fix_handsontable = Handsontable(fix_container, {
  /* オプション */
  width: 800,
  height: 240,
  //data: int_data,
  data: fdata,
  rowHeaders: true,
  colHeaders: ["項目名","値"],
  maxCols: maxColnum,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: true,
  colWidths:[200,200]
});

var brand_data = [];
for(var i=0; i < 20; i++){
  brand_data[i] = [];
  brand_data[i][0] = "";
  brand_data[i][1] = "";
  brand_data[i][2] = "";
  brand_data[i][3] = "";
  brand_data[i][4] = "";
}

var brand_container = document.getElementById('brand_table');
var brand_handsontable = Handsontable(brand_container, {
  /* オプション */
  width: 1000,
  height: 240,
  //data: brand_data,
  data: kdata,
  rowHeaders: true,
  colHeaders: ["キーワード","brand_name","manufacturer","recommended_browse_nodes","generic_keywords"],
  maxCols: 5,
  maxRows: maxRownum,
  manualColumnResize: true,
  autoColumnSize: false,
  colWidths:[200,150,150,250,400]
});



$("#save").click(function () {
  var pricedata = price_handsontable.getData();
  var titledata = title_handsontable.getData();
  var keydata = brand_handsontable.getData();
  var fixdata = fix_handsontable.getData();

  var senddata = {price: pricedata, title: titledata, keyword: keydata, fixed: fixdata};
  senddata = JSON.stringify(senddata);

  myData = {data: senddata};

  $.ajax({
    url: "/items/set",
    type: "POST",
    data: myData,
    dataType: 'json',
    success: function (myData) {
      alert("OK");
      //handsontable.loadData(myData);
    },
    error: function (myData) {
      //handsontable.loadData(myData);
      alert("NG");
    }
  });
});
